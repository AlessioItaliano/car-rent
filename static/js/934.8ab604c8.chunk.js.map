{"version":3,"file":"static/js/934.8ab604c8.chunk.js","mappings":"6OACaA,EAAkB,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,SAAf,E,yFCGvBC,EAAYC,EAAAA,GAAAA,IAAH,+FAOTC,EAASD,EAAAA,GAAAA,OAAH,sPAERE,EAAAA,EAAAA,OAAAA,UAWEA,EAAAA,EAAAA,OAAAA,gB,SCdb,EARoB,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACrB,OACE,SAAC,EAAD,WACE,SAAC,EAAD,CAAUC,QAASD,EAAnB,SAA+B,eAGpC,ECsJD,EAxIgB,WAGd,IAAML,GAAYO,EAAAA,EAAAA,IAAYV,GAExBW,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAAS,GAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAoCF,EAAAA,EAAAA,WAAS,GAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KAIA,GAAsCJ,EAAAA,EAAAA,UAAS,IAA/C,eAAOK,EAAP,KAAoBC,EAApB,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,sGACUV,GAASW,EAAAA,EAAAA,GAAcR,IADjC,gBACRS,EADQ,EACRA,QAEK,IAATT,GACFK,EAAeI,GACfN,GAAc,KAEdE,GAAe,SAAAK,GAAQ,wBAAQA,IAAR,OAAqBD,GAArB,IACnBA,EAAQE,QAAU,EACpBR,GAAc,GAEdA,GAAc,IAXF,2CAAH,qDAgBfI,GACD,GAAE,CAACV,EAAUG,IAsFd,OACE,iCACE,SAACY,EAAA,EAAD,KACA,SAACC,EAAA,EAAD,WACE,SAACC,EAAA,EAAD,MAEDzB,GACC,SAAC0B,EAAA,EAAD,KAEA,UAACF,EAAA,EAAD,YACE,SAACG,EAAA,EAAD,CAAS5B,KAAMgB,IACdF,IAAc,SAAC,EAAD,CAAaR,WAfjB,WACjBO,EAAQD,EAAO,EAChB,QAgBG,SAACiB,EAAA,EAAD,MAGL,C","sources":["redux/cars/carsSelectors.js","components/LoadMoreBtn/LoadMoreBtn.styled.js","components/LoadMoreBtn/LoadMoreBtn.jsx","pages/Catalog.jsx"],"sourcesContent":["export const selectCars = state => state.cars.cars;\nexport const selectIsLoading = state => state.cars.isLoading;\nexport const selectError = state => state.cars.error;\n","import styled from 'styled-components';\n\nimport { variables } from '../../stylesheet/variables';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n\n  padding-top: 100px;\n`;\n\nexport const Button = styled.button`\n  cursor: pointer;\n  color: ${variables.colors.accentBtn};\n\n  font-size: 16px;\n  font-weight: 500;\n  text-decoration-line: underline;\n\n  border: transparent;\n  background-color: transparent;\n\n  &:focus,\n  &:hover {\n    color: ${variables.colors.accentBtnHover};\n  }\n`;\n","import * as s from './LoadMoreBtn.styled';\n\nconst LoadMoreBtn = ({ onLoadMore }) => {\n  return (\n    <s.Container>\n      <s.Button onClick={onLoadMore}>Load more</s.Button>\n    </s.Container>\n  );\n};\n\nexport default LoadMoreBtn;\n","import { useState, useEffect } from 'react';\n\n// import { fetchCars, fetchAll } from 'api/fetchcars';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  // getFirstCarsPage,\n  getRestOfCars,\n} from '../redux/cars/carsOperations';\nimport {\n  // selectCars,\n  // selectError,\n  selectIsLoading,\n} from 'redux/cars/carsSelectors';\n\nimport Header from 'components/Header';\nimport Footer from 'components/Footer';\nimport Loader from 'components/Loader';\nimport CarList from 'components/CarList';\nimport Section from 'components/Section';\nimport SearchBar from 'components/SearchBar';\nimport LoadMoreBtn from 'components/LoadMoreBtn';\n\nconst Catalog = () => {\n  // const cars = useSelector(selectCars);\n  // const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n\n  const dispatch = useDispatch();\n  const [page, setPage] = useState(1);\n  const [showButton, setShowButton] = useState(false);\n  // const [totalCars, setTotalCars] = useState(0);\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [currentCars, setCurrentCars] = useState([]);\n  const [currentCars, setCurrentCars] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { payload } = await dispatch(getRestOfCars(page));\n\n      if (page === 1) {\n        setCurrentCars(payload); // Якщо це перша сторінка, замініть поточний список\n        setShowButton(true);\n      } else {\n        setCurrentCars(prevCars => [...prevCars, ...payload]); // Додайте нові дані до поточного списку\n        if (payload.length >= 8) {\n          setShowButton(true);\n        } else {\n          setShowButton(false);\n        }\n      }\n    };\n\n    fetchData();\n  }, [dispatch, page]);\n\n  // useEffect(() => {\n  //   const fetchData = async () => {\n  //     const { payload } = await dispatch(getRestOfCars(page));\n\n  //     if (page === 1) {\n  //       setCurrentCars(payload); // Якщо це перша сторінка, замініть поточний список\n  //       setShowButton(true);\n  //     } else {\n  //       setCurrentCars(prevCars => [...prevCars, ...payload]); // Додайте нові дані до поточного списку\n  //       if (payload.length >= 8) {\n  //         setShowButton(true);\n  //       } else {\n  //         setShowButton(false);\n  //       }\n  //     }\n  //   };\n\n  //   fetchData();\n  // }, [dispatch, page]);\n\n  // useEffect(() => {\n  //   // const fetchData = async () => {\n  //   const fetchData = async () => {\n  //     const { payload } = await dispatch(getRestOfCars(page));\n  //     // setCurrentCars(prevState => [...prevState, ...payload]);\n  //     if (payload.length >= 8) {\n  //       setShowButton(true);\n  //     } else {\n  //       setShowButton(false);\n  //     }\n  //     //   if (page === 1) {\n  //     //     dispatch(getRestOfCars(page));\n  //     //     setShowButton(true);\n  //     //   }\n\n  //     //   if (page > 1) {\n  //     //     const response = await dispatch(getRestOfCars(page));\n  //     //     if (response.payload.length >= 8) {\n  //     //       setShowButton(true);\n  //     //     } else {\n  //     //       setShowButton(false);\n  //     //     }\n  //     //   }\n  //   };\n\n  //   fetchData();\n  // }, [dispatch, page]);\n\n  // useEffect(() => {\n  //   if (page > 1) dispatch(getRestOfCars(page));\n  // }, [page, dispatch]);\n\n  // useEffect(() => {\n  //   const getAllCars = async () => {\n  //     try {\n  //       const data = await fetchAll();\n  //       setTotalCars(data.length);\n  //     } catch (error) {\n  //       console.log(error);\n  //     }\n  //   };\n  //   getAllCars();\n  // }, []);\n\n  // useEffect(() => {\n  //   setIsLoading(true);\n\n  //   try {\n  //     const fetchData = async () => {\n  //       const data = await fetchCars(page);\n  //       setCurrentCars(prevState => [...prevState, ...data]);\n  //     };\n  //     fetchData();\n  //   } catch (error) {\n  //     console.log(error);\n  //   } finally {\n  //     setIsLoading(false);\n  //   }\n  // }, [page]);\n\n  const onLoadMore = () => {\n    setPage(page + 1);\n  };\n\n  return (\n    <>\n      <Header />\n      <Section>\n        <SearchBar />\n      </Section>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <Section>\n          <CarList cars={currentCars} />\n          {showButton && <LoadMoreBtn onLoadMore={onLoadMore} />}\n        </Section>\n      )}\n      <Footer />\n    </>\n  );\n};\n\nexport default Catalog;\n"],"names":["selectIsLoading","state","cars","isLoading","Container","styled","Button","variables","onLoadMore","onClick","useSelector","dispatch","useDispatch","useState","page","setPage","showButton","setShowButton","currentCars","setCurrentCars","useEffect","fetchData","getRestOfCars","payload","prevCars","length","Header","Section","SearchBar","Loader","CarList","Footer"],"sourceRoot":""}